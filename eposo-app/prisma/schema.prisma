```prisma
// This is your Prisma schema file for MySQL.
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  passwordHash  String
  name          String
  phoneNumber   String?
  nickname      String?   @unique
  emailVerified DateTime?
  image         String?
  jobField      String?
  jobTitle      String?
  careerLength  Int?
  tickets       Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts          Account[]
  matchingRequest   MatchingRequest?
  groupParticipants GroupParticipant[]
  payments          Payment[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Group {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  location     String
  eventDate    DateTime
  participants GroupParticipant[]
}

model GroupParticipant {
  id      String @id @default(cuid())
  userId  String
  user    User   @relation(fields: [userId], references: [id])
  groupId String
  group   Group  @relation(fields: [groupId], references: [id])

  @@unique([userId, groupId])
}

model MatchingRequest {
  id                 String   @id @default(cuid())
  userId             String   @unique
  user               User     @relation(fields: [userId], references: [id])
  status             String   @default("PENDING")
  region             String
  wants              String
  desiredConnections String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

model Payment {
  id               String        @id @default(cuid())
  userId           String
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount           Int
  status           PaymentStatus @default(PENDING)
  orderId          String        @unique
  transactionId    String?
  paymentGateway   String?
  ticketsPurchased Int
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
}
```